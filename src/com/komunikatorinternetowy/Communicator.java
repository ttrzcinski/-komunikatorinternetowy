package com.komunikatorinternetowy;

import javax.swing.JPanel;
import java.io.*;
import java.net.*;
import java.io.Serializable;

/**
 * Communicator panel used as chat window.
 *
 * Created on 2010-01-15, 13:48:59
 *
 * @author Maciej Chwaleba, Tomasz "Rzeźnik" Trzciński <ttrzcinski>
 */
public class Communicator extends JPanel implements Serializable {

    private BufferedReader czytWiad;//strumien odzcytu wiadomosci przychodzacych
    private PrintWriter piszWiad;//strumien wysylania wiadomosci wychodzacych
    private Socket socket;//przechowuje adres ip i port komunikacji do serwera
    private String uzytkownik;//Nazwa uzytkownika, jaka jest widoczna na serwerze
    /**
     * File to transcript conversations.
     */
    private File transcriptFile;

    //settery
    public void setSocket(Socket socket) {
        this.socket = socket;
    }

    public void set_czytWiad(BufferedReader czytWiad) {
        this.czytWiad = czytWiad;
    }

    public void set_piszWiad(PrintWriter piszWiad) {
        this.piszWiad = piszWiad;
    }

    public void set_uzytkownik(String uzytkownik) {
        this.uzytkownik = uzytkownik;
    }

    public void setTranscriptFile(File plikzapisu) {
        this.transcriptFile = plikzapisu;
    }

    /**
     * Returns used socekt.
     *
     * @return
     */
    public Socket getSocket() {
        try {
            //zwrócic socket jako adrs ip i port komunikacji
            //jako nowa instance obiektu z parametrami
            return this.socket = new Socket("127.0.0.1", 5000);
        } catch (IOException ex) {
            //wypisz drzewko błędu
            ex.printStackTrace();
            //wypisz nląd na konsole
            System.out.println("Nie można nawiązać połączenia");
            //zwroc uzywane socket
            return this.socket;
        }
    }

    //Procedura zwracajaca zbuforowany strumien odczytanej wiadomosci
    public BufferedReader get_czytWiad() {
        try {
            //utworz stumien wejsciowy z odczytanego struminia z gniazda
            InputStreamReader czytStrm = new InputStreamReader(socket.getInputStream());
            //zwroc zbuforowany strumien
            return this.czytWiad = new BufferedReader(czytStrm);
        } catch (IOException ex) {
            ex.printStackTrace();//wypisz drzewko bledu
            //wypisz blad na konsole
            System.out.println("Nie można nawiązać połączenia");
            //zwroc strumien odczytanej wiadomosci
            return this.czytWiad;
        }
    }

    //zrwaca strumien do wysylania wiadomosci
    public PrintWriter get_piszWiad() {
        try {
            //zwroc odczytany strumien wychodzacy na socket
            return this.piszWiad = new PrintWriter(socket.getOutputStream());
        } catch (IOException ex) {
            ex.printStackTrace();//wypisz drzewko bledu
            //wypisz blad na konsole
            System.out.println("Nie można nawiązać połączenia");
            //zwróc strumien wychodzacy
            return this.piszWiad;
        }
    }

    //zwraca nazwe uzytkownika
    public String get_uzytkownik() {
        return this.uzytkownik = jTextField1.getText();
    }

    public File getTranscriptFile() {
        return this.transcriptFile = new File("zapisaneRozmowy.txt");
    }

    /**
     * Sets params used in communication.
     *
     * @param name
     */
    private void configureCommunication(String name) {
        //  get_uzytkownik();
        //  set_uzytkownik(uzytkownik);
        getSocket();
        setSocket(socket);//ustaw socket komunikacji

        get_czytWiad();
        set_czytWiad(czytWiad);//ustaw odczyt wiadomosci

        get_piszWiad();
        set_piszWiad(piszWiad);//ustaw wysyłkę wiadomosci

        //wypisz komunikat o gotowosci pracy
        System.out.println("Obsluga sieci przygotowana");
    }

    //Konstruktor bezparametrowy
    public Communicator() {
        //wyrysuj komponenty dodane automatycznie
        initComponents();
        uzytkownik = System.getProperty("user.name");
        //skonfiguruj komuniacje na domyślne
        configureCommunication(uzytkownik);
        //wartości wraz z nazwą użytkownika

        //Creates new thread to read incoming messages
        Thread watekOdbiorcy = new Thread(new OdbiorcaKomunikatow());
        watekOdbiorcy.start();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setFont(new java.awt.Font("Dialog", 0, 12));
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("Zapisz rozmowę");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Wyślij wiadomość");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Dialog", 0, 12));
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jButton3.setText("Wyczyść okno wiadomości");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Wczytaj rozmowę");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setText("Nazwa Użytkownika");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                                                        .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGap(40, 40, 40)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jButton2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jButton4))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jButton1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton3)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    //Procedura odpoiwadajca za zapis rozmowy do pliku tekstowego.
    public void zapisz() {
        try {
            getTranscriptFile();
            setTranscriptFile(transcriptFile);//ustaw plik zapisu
            String tekst = null;
            //utworz strumien wyjsciowy do zapisu do pliku
            BufferedWriter zapisz = new BufferedWriter(new FileWriter(transcriptFile));
            tekst = jTextArea1.getText();//pobierz tresc rozmowy
            zapisz.write(tekst + "\n");//wypisz tresc rozmowy do strumienia z enterem
            zapisz.close();//zamknij strumien
        } catch (IOException ex) {
            ex.printStackTrace();
            //wypisz drzewko bledu
        }
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        zapisz();
    }//GEN-LAST:event_jButton2ActionPerformed

    public void czysc() {
        jTextArea1.setText(" ");//czysci pole rozmowy
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        czysc();
    }//GEN-LAST:event_jButton3ActionPerformed

    //PLrocedura wczytuje tresc rozmowy i wyrzuca ja na pole rozmowy
    public void wczytaj() {
        try {
            //sprobuj odczytac plik przez strumien wejsciowy
            BufferedReader odczyt = new BufferedReader(new FileReader(transcriptFile));
            String wiersz = null;

            //dopoki mozna odczytac linie w strumieniu
            while ((wiersz = odczyt.readLine()) != null) {
                System.out.println(wiersz);//wypisz linie na konsole
                jTextArea1.append(wiersz + "\n");//logDown linie na pole rozmowy
            }
            odczyt.close();//zaknij struminen
        } catch (Exception ex) {
            ex.printStackTrace();//wypisz drzewko bledu
        }
    }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        wczytaj();
    }//GEN-LAST:event_jButton4ActionPerformed

    //procedura odpowiadajaca za wysylanie komunikatow do serwera
    public void wyslij() {
        try {//sprobuj
            get_uzytkownik();
            set_uzytkownik(uzytkownik);//ustaw uzyttkownika
            //send tekst wraz z uzytkownikiem
            piszWiad.println(uzytkownik + ": " + jTextArea2.getText());
            piszWiad.flush();//przeczysc strumien
        } catch (Exception ex) {
            ex.printStackTrace();
            //wyp[isz drzewko blędu
        }

        jTextArea2.setText(" ");//wyzeruj pole tekstowe służace do
        //wpisywania tresci wiadomosci
        jTextArea2.requestFocus();//wymmuś migajcą kreseczkę w tym polu
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        wyslij();
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    //Interfejs odpowiadający za obsługę przychodzących komuniktow
    public class OdbiorcaKomunikatow implements Runnable {
        //procedura odpowiadająca za działanie wątku
        public void run() {
            String wiadom;//łąńcuch tresci wiadomosci
            try {//spróbuj
                //dopóki możesz odczytac linie w otrzymanej wiadomosci
                while ((wiadom = czytWiad.readLine()) != null) {
                    //wypisz odczytana tresc wiadomosci w konsoli
                    System.out.println("Odczytano: " + wiadom);
                    //wypisz tress wiadomosci w polu tekstowym
                    jTextArea1.append(wiadom + "\n");
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

}
