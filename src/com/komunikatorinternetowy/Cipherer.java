package com.komunikatorinternetowy;

import com.komunikatorinternetowy.Content.Strings;

import java.awt.Color;
import java.awt.TextField;
import java.text.MessageFormat;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 * Ciphering component panel.
 * <p>
 * Responsible for presenting to user current state of work and is a point to change
 * used cipher settings with inherited message.
 * <p>
 * Created on 2010-04-14, 08:07:59
 *
 * @author Tomasz "Rzeźnik" Trzciński
 */
public class Cipherer extends JPanel {
    private final static String DEFAULT_PASSWORD = "haslo";
    private final static int DEFAULT_BIAS = 1;

    /**
     * Handle to used cipherer.
     */
    private RzezniksCipher usedCipher;// = new RzezniksCipher();

    /**
     * Creates new instance of Cipherer
     */
    public Cipherer() {
        //Creates new cipher with given password and bias1
        this.usedCipher = new RzezniksCipher(DEFAULT_PASSWORD, DEFAULT_BIAS);
        //Render UI components
        this.initComponents();
        //Sets hint to button
        this.buttonSettings.setToolTipText(Strings.CPR_HINT_BUTTON_SETTINGS);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */

    /**
     * Shows error dialog with given title and phrase.
     *
     * @param phrase given phrase
     * @param title  given title
     */
    private void showError(String phrase, String title) {
        JOptionPane.showMessageDialog(this, phrase, title,
                JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Shows information dialog with given title and phrase.
     *
     * @param phrase given phrase
     * @param title  given title
     */
    private void showInfo(String phrase, String title) {
        JOptionPane.showMessageDialog(this, phrase, title,
                JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Shows cipher settings dialog.
     */
    private void showSettingsDialog() {
        //Create UI components with current values to use them in dialog
        TextField TxfSimpleKey = new TextField(this.usedCipher.getSimpleKey());
        TxfSimpleKey.setSize(200, 20);
        TextField TxfBias = new TextField(Integer.toString(this.usedCipher.getBias()));
        TxfBias.setSize(200, 20);

        //Create a table to render created components vertically
        Object[] dialogUIComponents = {Strings.CPR_LABEL_SIMPLE_KEY, TxfSimpleKey,
                Strings.CPR_LABEL_BIAS, TxfBias};

        //Keep chosen button code
        int chosenButton = JOptionPane.showConfirmDialog(this,
                dialogUIComponents,
                Strings.CPR_TITLE_CIPHER_PARAMS,
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE
        );

        //If user confirmed
        if (JOptionPane.OK_OPTION == chosenButton) {
            //Create temporary key and bias
            int tempBias = 0;
            //Trim the key's value
            String tempKey = TxfSimpleKey.getText().trim();
            //Drop fixing flag
            boolean flagFixing = false;
            //Try to obtain value from bias field
            try {
                tempBias = Integer.parseInt(TxfBias.getText().trim());
                //If it worked, set to fixing
                flagFixing = true;
            } catch (Exception ec1) {
                //Show an error in dialog
                this.showError(Strings.CPR_MSG_BIAS_ERROR, Strings.CPR_TITLE_BIAS_ERROR);
            }

            //If it needs fixing
            if (flagFixing) {
                //Obtain current color of background
                Color previousColor = this.buttonSettings.getBackground();
                //Set background color to red.
                this.buttonSettings.setBackground(Color.RED);
                //Set presented letter to SAVING
                this.buttonSettings.setText(Strings.CPR_CAPTION_SAVING);
                //Set read values in used cipher
                this.usedCipher.setSimpleKey(tempKey);
                this.usedCipher.setBias(tempBias);

                //Show information dialog with changes in object
                this.showInfo(
                        MessageFormat.format(Strings.CPR_MSG_CHANGES,
                                this.usedCipher.getSimpleKey(),
                                Integer.toString(this.usedCipher.getBias())
                        ),
                        Strings.CPR_TITLE_CHANGES);

                //Set color to previous
                this.buttonSettings.setBackground(previousColor);
                //Change presented letter to WRITING
                this.buttonSettings.setText(Strings.CPR_CAPTION_WAITING);
            }
        }
    }

    /**
     * Ciphers given content with showing signs of work on UI.
     *
     * @param content given content
     * @return deciphered base message
     */
    public String cipher(String content) {
        //Read currently presented color
        Color previousColor = this.buttonSettings.getBackground();
        //Set background color to RED
        this.buttonSettings.setBackground(Color.RED);

        //Obtain result as deciphered message
        String result = this.usedCipher.cipher(content);

        //Set background color to previously used
        this.buttonSettings.setBackground(previousColor);
        //set letter to WAITING
        this.buttonSettings.setText(Strings.CPR_CAPTION_WAITING);
        //Return deciphered base message
        return result;
    }

    /**
     * Deciphers given content.
     *
     * @param content given content to decipher
     * @return base message
     */
    public String decipher(String content) {
        //Get currently presented color
        Color previousColor = this.buttonSettings.getBackground();
        //Set temporary color to red
        this.buttonSettings.setBackground(Color.RED);

        //Obtain result of deciphering process
        String result = this.usedCipher.decipher(content);

        //Set background color to previously used
        this.buttonSettings.setBackground(previousColor);
        //Change presented letter to waiting
        this.buttonSettings.setText(Strings.CPR_CAPTION_WAITING);
        //Return ciphered phrase
        return result;
    }

    public void setSimpleKey(String key) {
        this.usedCipher.setSimpleKey(key);
    }

    public void setBias(int bias) {
        this.usedCipher.setBias(bias);
    }

    public String getSimpleKey() {
        return this.usedCipher.getSimpleKey();
    }

    public int getBias() {
        return this.usedCipher.getBias();
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonSettings = new javax.swing.JButton();

        buttonSettings.setBackground(new java.awt.Color(255, 255, 0));
        buttonSettings.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        buttonSettings.setText("W");
        buttonSettings.setBorder(null);
        buttonSettings.setBorderPainted(false);
        buttonSettings.setMargin(new java.awt.Insets(0, 0, 0, 0));
        buttonSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSettingsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(buttonSettings, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(buttonSettings, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSettingsActionPerformed
        this.showSettingsDialog();
    }//GEN-LAST:event_buttonSettingsActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonSettings;
    // End of variables declaration//GEN-END:variables

}
