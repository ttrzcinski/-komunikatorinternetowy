/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Szyfrator.java
 *
 * Created on 2010-04-14, 08:07:59
 */

package szyfrrzeznika;

import java.awt.Color;
import java.awt.TextField;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 * Panel komponentu szyfrującego.
 *
 * Odpowiada za prezentację użytkownikowi stanu pracy oraz stanowi punkt
 * ustawień parametrów szyfrowania za pomocą dziedziczonego komunikatu dialogowego.
 *
 *
 * @author Tomasz "Rzeźnik" Trzciński
 */
public class Szyfrator extends JPanel {

    //zmienne
    private SzyfrRzeznika szyfr = new SzyfrRzeznika();
    //obiekt klasy SzyfrRzeznika slużąćy jako odwołanie
    //do włąściwego szyfrowania

    //koniec zmienych

    /** Creates new form Szyfrator */
    //konstruktor bezparametrowy
    public Szyfrator()
    {
        //tworzy obiekt szyfru z kluczem podstawowym "haslo" i
        //przesunieciem o 1
        this.szyfr = new SzyfrRzeznika("haslo", 1);
        //żadanie konstruowania komponentów dodanych automatycznie
        this.initComponents();
        //przypisuje podpisw "chmurce" do przycisku, który w sumie
        //stanowi całość panelu komponentu
        this.PrzUstawien.setToolTipText("Po kliknięci zmienia parametry szyfrowania.\n\r" +
                "\n" +
                " W - wolny, oznacza, że jest gotowy do pracy.\r" +
                " Z - zajęty, oznacza, że teraz pracuje.");
    }//

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */

    //Procedura pokazuje dialog błędu o podanej treści i tytule
    private void pokazError(String tresc, String tytul)
    {
        JOptionPane.showMessageDialog(this, tresc, tytul, JOptionPane.ERROR_MESSAGE);
    }//

    //Procedura pokazuje dialog informacji o podanej tresci i tytule
    private void pokazKomm(String tresc, String tytul)
    {
        JOptionPane.showMessageDialog(this, tresc, tytul, JOptionPane.INFORMATION_MESSAGE);
    }

    //Procedura pokazuje dialog ustawien służący do edycji
    //parametrów szyfrowania wcześniej pobierająć ich aktualne
    //wartości z obiektu szyfr
    private void pokazKommUstawien()
    {
        //utworz nowy komponent pola tekstowego
        TextField RamkowyKlucz1 = new TextField();
        //ustaw teksty wyświetlany na aktualną wartość parametru
        RamkowyKlucz1.setText(this.szyfr.getKluczProsty());
        //ustaw rozmiar komoponentu na 200 pixeli szer. i 20 pixeli wys.
        RamkowyKlucz1.setSize(200, 20);

        //utworz nowy komponent pola tekstowego
        TextField RamkowyPrzesuniecie = new TextField();
        //ustaw teksty wyświetlany na aktualną wartość parametru
        RamkowyPrzesuniecie.setText(Integer.toString(this.szyfr.getPrzesuniecieZnakowe()));
        //ustaw rozmiar komoponentu na 200 pixeli szer. i 20 pixeli wys.
        RamkowyPrzesuniecie.setSize(200, 20);

        //utwórz tablice obiektów do wyświeltenia w pionowej linii
        //w utworzoneym dialogu
        Object[] msgowe = {"Klucz prosty (tekstowy):", RamkowyKlucz1, "Przesunięcie znakowe", RamkowyPrzesuniecie};

        //zapisz wartosc nacisnietego przycisku w wywolanej instancji
        //dialogu potwierdzającego z tablica obiektów jako treścią
        //komunikatu.. java dalej tu nie domaga..
        int wybral1 = JOptionPane.showConfirmDialog(this,
                msgowe,
                "Parametry szyfrowania",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE
                );

        //jesli wybrany na komunikacie przycisk to ok
        if (JOptionPane.OK_OPTION == wybral1)
        {
            String klucz="";//wyzeruj klucz
            int przes=0;//wyzeruj przesuniecie

            boolean poprawiac=false;//ustaw flage poprawiania na falsz

            //zwróc wartość klucza pobierając z komponentu wpisaną wartość
            //i kasując otaczająće ją zanki białe
            klucz = RamkowyKlucz1.getText().trim();

            //spróbuj pobrać wartość z pola tekstowego do przesuniecia
            try
            {            
                przes = Integer.parseInt(RamkowyPrzesuniecie.getText().trim());
                poprawiac=true;//jeśli się udalo, to ustaw na poprawianie
            }
            catch(Exception ec1)
            {
                //nie udało się przetworzyć wprowadzonej wartości w polu tekstowym
                this.pokazError("Błędna wartość w wprowadzonym przesunięciu." +
                        "\n\r\n\rNie wprowadzono zmian.", "Błąd przesunięcia");
            }

            //jesli ustawiono na poprawianie, popraw wartosci w obiekcie
            if (poprawiac == true)
            {
                //zapisz kolor, jaki byl akurat wyświetlany
                Color byl = this.PrzUstawien.getBackground();
                //ustaw kolor wyswietlany na czerwony
                this.PrzUstawien.setBackground(Color.RED);
                //ustaw litere wyswietlana na Z
                this.PrzUstawien.setText("Z");
                //ustaw klucz porsty na wprowadzoną wartość w polu tekstowym
                this.szyfr.setKluczProsty(klucz);
                //ustaw przesuniecie na wprowadzoną wartość w polu tekstowym
                this.szyfr.setPrzesuniecieZnakowe(przes);

                //pokaz komunikat o udanej zminie wartości w obiekcie
                this.pokazKomm("Poprawnie wprowadzono zmiany." +
                        "\n\r\n\r" +
                        "Klucz prosty: "+this.szyfr.getKluczProsty()+
                        "\n\rPrzesunięcie: "+Integer.toString(this.szyfr.getPrzesuniecieZnakowe()),
                        "Zmiany w parametrach.");

                //ustaw kolor wyświetlany na poprzednio wyświetlany
                this.PrzUstawien.setBackground(byl);
                //ustaw litere wyswietlana na W
                this.PrzUstawien.setText("W");
            }
        }
        else
        {
            ;//jesli kliknął cancel, to nic nie rób.. NOP
        }
    }//

    //interfejsowe

    //Procedura służąca do przekazania wartości do zaszyfrowania
    //jednocześnie z pokazaniem znaków pracy na interfejscie
    public String szyfruj(String tresc)
    {
        String zwr = "";//utwórz łąńcuch zwrotny
        //zapamietaj wyswietlany kolor z panelu
        Color byl = this.PrzUstawien.getBackground();
        //zmien kolor wyswietlany na czerwony
        this.PrzUstawien.setBackground(Color.RED);

        //na łąąńcuch zwrotny zwroc wartośc po zaszyfrowaniu
        zwr = this.szyfr.szyfruj(tresc);

        //ustaw kolor wyswietlany na taki, jaki byl poprzednio
        this.PrzUstawien.setBackground(byl);
        //ustaw wyswietlaną literę na W
        this.PrzUstawien.setText("W");

        return zwr;//zwróc odszyfrowany łąńcuch znaków
    }//

    //Odszyfrowuje podaną zaszyfrowaną wiadomosć
    public String deszyfruj(String tresc)
    {
        String zwr = "";//ustórz łąńcuch zwrotny
        //zapisz kolor, jaki byl wyswietlany
        Color byl = this.PrzUstawien.getBackground();
        //ustaw wyswietlany kolor na czerwony
        this.PrzUstawien.setBackground(Color.RED);

        //na łąncuch zwrotny zwroc tresc odszyfrowaną
        zwr = this.szyfr.deszyfruj(tresc);

        //ustaw kolor wyswietlany na taki, jaki byl
        this.PrzUstawien.setBackground(byl);
        //ustaw wyswietlana litere na W
        this.PrzUstawien.setText("W");

        return zwr;//zwróc odszyfrowany łąńcuch tekstowy
    }//

    //koneic interfejsowych
    
    //settery - ustawiają wartości zmiennych prywatnych
    public void setKluczProsty(String nowy){this.szyfr.setKluczProsty(nowy);}
    public void setPrzesuniecie(int wart){this.szyfr.setPrzesuniecieZnakowe(wart);}

    //gettery - zwracają wartości zmiennych prywatnych
    public String getKluczProsty(){return this.szyfr.getKluczProsty();}
    public int getPrzesuniecie(){return this.szyfr.getPrzesuniecieZnakowe();}
            
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PrzUstawien = new javax.swing.JButton();

        PrzUstawien.setBackground(new java.awt.Color(255, 255, 0));
        PrzUstawien.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        PrzUstawien.setText("W");
        PrzUstawien.setBorder(null);
        PrzUstawien.setBorderPainted(false);
        PrzUstawien.setMargin(new java.awt.Insets(0, 0, 0, 0));
        PrzUstawien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrzUstawienActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PrzUstawien, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PrzUstawien, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void PrzUstawienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrzUstawienActionPerformed
        this.pokazKommUstawien();
    }//GEN-LAST:event_PrzUstawienActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton PrzUstawien;
    // End of variables declaration//GEN-END:variables

}
